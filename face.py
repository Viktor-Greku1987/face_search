#coding=utf8
import cv2
face_cascade = cv2.CascadeClassifier(r'C:/Python_work/GIt-simpl/raspozn/haarcascade_frontalface_default.xml')

def face_search(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    #print(gray.shape)
    # следующая функция будет производить поиск лица на изобраении.
    # На вход принимает 6 параметров среди которых только первый обязвтельный.
    # Воспользцемся перывми трея парамтерами:
    #   1) восмибитная матрица изображения (другими словами картинка в градации серго)
    #   2) коэффициент отвечает за количество уменьшения изображения ( чем меньше знчение, тем дольше, но качественнее работает алгоритм)
    #   3) коэффициент обнаружения ( чем больше число, тем меньше образов сможет обнаружить алгоритм(размер рамски). Число должно быть нечетным)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    # если лица будут обнаружены ф-ция вернет прямоугольник заданный четырмя параметрами.
    # Первые два это начало координат(верхний левый угол) остальные два параметра это ширина и высота Rect(x,y,w,h)
    # поэтому цикдом for  пройдемся по всем найденным прямоугольникам и доресуем их на исходном изображении
    for (x, y, w,h) in faces:
        # прямоугольники будем прорисовывать на изображении с помощью функции rectangle. Данная функция принимает на вход 5 параметров:
        # 1) изображение на котлором нужно гнарисовать прямоугольник
        # 2) начальная точка. Левый верхний угол предстаялется котежем координат (x,y)
        # 3) конечная точка - парвый нижний угол . представялес кортежем координат (x+w, y+h)
        # 4) цвет контура задается картежем в стиде r, g, b (r, g, b)Т.е. три часла от 0 до 255
        # 5) толщина контура. Натруральбное число -количество пикселей.
        cv2.rectangle(img, (x,y), (x+w, y+h), (0, 255, 0), 5)
    return img

# работа с вебкой , изображение в реальном времени

cap =cv2.VideoCapture(0)
# зададим ширину кадра в видеопотоке
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1600)
#  зададим ывысоту кадров видеопотоке
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1480)
#
while True:
    ret, img = cap.read()
    #  преобразуем кадр в градацию серовго
    face_img = face_search(img)
    cv2.imshow("camera", face_img)
    #cv2.imshow("camera", img)
    if cv2.waitKey(10) == 27:
       break
cap.release()
cv2.destroyAllWindows()



